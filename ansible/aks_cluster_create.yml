- name: Create Azure Kubernetes Service
  hosts: aks
  gather_facts: false

  vars:
    username: azureuser
    ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNGcO1DqGmrA7l53di7659x4SJCzAt8bla7cgixfhuRStZWyKmULmzf2SNjuDT6e7quNzLzlucfm5E5Yi9S98kRX5MwIzM/8vQdM7Sh78CMsIPSCEdXJ1xoBGXAVMJszMwddbDQSxqsmezXTbSTDxUbQVChOGpJioaCEwUi5KqzgGJXcGAqmNZw1bC3UQ7fur5UBoeuEEpBfyi8AYGcDm5v3u2UHvA1Tcwl6ZnvFEYjc5JaD1SUJNSUP3gD7nH5LKhmVeVkebp724iTvlucEFdfKuC5/BkhI3VM/IgZJZmRep9RLeyYonVjNYewyhgYMWrrwB0cPDeWlDazUFtbZU5 azureuser"


  tasks:

    # ---------------------------------------------------------------------------
    # Check resource group and acr exists
    # ---------------------------------------------------------------------------
    - name: Get resource group info
      azure.azcollection.azure_rm_resourcegroup_info:
        name:     '{{ resource_group }}'
      register: _resource_group_info

    - name: Assert resource group exists
      ansible.builtin.assert:
        that:
          - _resource_group_info.resourcegroups | length > 0
        fail_msg: "Missing resource group {{ resource_group }}"

    - name: Get registry info
      azure.azcollection.azure_rm_containerregistry_info:
        name:           '{{ registry.name }}'
        resource_group: '{{ registry.resource_group }}'
      register: _registry_info

    - name: Assert registry exists
      ansible.builtin.assert:
        that:
          - _registry_info.registries | length > 0
        fail_msg: "Missing registry {{ registry.name }} in resource group {{ registry.resource_group }}"


    # ---------------------------------------------------------------------------
    # Create a managed Azure Container Services (AKS) cluster
    # ---------------------------------------------------------------------------
    - name: List supported kubernetes version from Azure
      azure.azcollection.azure_rm_aksversion_info:
        location: "{{ location }}"
      register: _aks_versions_info

    - name: Get facts of specific subnet
      azure.azcollection.azure_rm_subnet_info:
        resource_group:       '{{ resource_group }}'
        virtual_network_name: '{{ virtual_network_name }}'
        name:                 '{{ subnet_name }}'
      register: _subnet_info
      vars:
        _virtual_network: '{{ virtual_networks | selectattr("name", "equalto", virtual_network_name) | list | first }}'
        _subnet:          '{{ _virtual_network.subnets | selectattr("name", "equalto", subnet_name)  | list | first   }}'

    - name: Assert subnet exists
      ansible.builtin.assert:
        that:
          - _subnet_info.subnets | length > 0
        fail_msg: >-
          Missing subnet {{ subnet_name }} in virtual network {{ virtual_network_name }} in resource group {{ resource_group }}

    - name: Create a managed Azure Container Services (AKS) cluster
      azure.azcollection.azure_rm_aks:
        name:               '{{ cluster_name }}'
        location:           '{{ location }}'
        resource_group:     '{{ resource_group }}'
        dns_prefix:         '{{ cluster_name }}'
        kubernetes_version: "{{ _aks_versions_info.azure_aks_versions[-1] }}"

        linux_profile:
          admin_username: "{{ username }}"
          ssh_key:        "{{ ssh_key }}"

        # service_principal:
        #   client_id:      "{{ client_id }}"
        #   client_secret:  "{{ client_secret }}"

        agent_pool_profiles:
          - name: default
            count: 1
            vm_size: Standard_D2_v2
            vnet_subnet_id: '{{ _subnet_info.subnets[0].id }}'
            mode: System
        node_resource_group: '{{ nodes_resource_group }}'
        enable_rbac: yes
        network_profile:
          load_balancer_sku: standard
          network_plugin: azure

        tags: '{{ cluster_tags | default({}) }}'

    - name: Get cluster config
      tags:
        - always
      include_tasks: ./tasks/aks/cluster_config_get.yml
      when:
        - _kubeconfig_file_path is not defined

    - name: Get a list of all nodes
      kubernetes.core.k8s_info:
        kind: Node
        kubeconfig: '{{ _kubeconfig_file_path }}'
      register: nodes_list

    - name: Assert cluster nodes exist
      assert:
        that:
          - nodes_list.resources | length > 0
        fail_msg: No node exist in the cluster
