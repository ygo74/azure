---
# -----------------------------------------------------------------------------
# Deploy AKS Bootstrap to support Inventory infrastructure
# -----------------------------------------------------------------------------
resources:
  containers:
  # Container image with ansible and azure collection installed
  - container: ansible_az
    image: aksbootstrap.azurecr.io/ansible_azure:dev
    endpoint: aksbootstrap

trigger: none

variables:
  # Get Ansible-Autmation secret
  - group: azure_automation

  - name: aksName
    value: aksbootstrap

  - name: acrName
    value: aksbootstrap

  - name: resourceGroup
    value: rg-aks-bootstrap-networking-spoke

stages:
  - stage: deploy_aks
    displayName: Deploy AKS Bootstrap

    jobs:
      # -----------------------------------------------------------------------------
      # Create AKS Cluster
      # -----------------------------------------------------------------------------
      - job: create_cluster
        displayName: Create Aks Bootstrap
        pool:
          vmImage: 'ubuntu-latest'

        container: ansible_az

        steps:

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  ansible-playbook aks_create_cluster.yml -i inventory/ -e ansible_python_interpreter=/usr/bin/python3
            displayName: 'Create cluster'
            env:
              AZURE_TENANT: $(TenantId)
              AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZURE_CLIENT_ID: $(Ansible-Automation-ClientId)
              AZURE_SECRET: $(Ansible-Automation)

      # -----------------------------------------------------------------------------
      # Base Configuration for the cluster
      # -----------------------------------------------------------------------------
      - job: configure_cluster
        displayName: Configure Aks Bootstrap
        dependsOn:
          - create_cluster
        pool:
          vmImage: 'ubuntu-latest'

        steps:

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks update -n $(aksName) -g $(resourceGroup) --attach-acr $(acrName) --enable-managed-identity
              addSpnToEnvironment: true
              useGlobalConfig: true
            displayName: 'Enable Managed identity and attach to ACR'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Ansible-Automation'
              azureResourceGroup: 'rg-aks-bootstrap-networking-spoke'
              kubernetesCluster: 'aksbootstrap'
              command: 'apply'
              arguments: '-f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
            displayName: 'Deploy standard kubernetes dashboard'

  - stage: cert_manager
    displayName: Configure cert-manager
    dependsOn:
      - deploy_aks

    jobs:
      # -----------------------------------------------------------------------------
      # Install Cert Manager
      # -----------------------------------------------------------------------------
      - job: configure_cert_manager
        displayName: Configure Cert-Manager
        pool:
            vmImage: 'ubuntu-latest'

        steps:

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  export
            displayName: 'Display environment'


          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install kubectl
                az aks install-cli

                # Get credentials for the AKS cluster
                az aks get-credentials --resource-group rg-aks-bootstrap-networking-spoke --name aksbootstrap

                if kubectl get namespace cert-manager; then
                  echo "Namespace cert-manager already exists"
                else
                  kubectl create namespace cert-manager
                fi

                # Run kubectl command
                kubectl label namespace cert-manager cert-manager.io/disable-validation=true
            displayName: 'Create cert-manager namespace'

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Add the Jetstack Helm repository
                helm repo add jetstack https://charts.jetstack.io

                # Update your local Helm chart repository cache
                helm repo update
            displayName: 'Add jetstack repo'
