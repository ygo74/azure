---
# -----------------------------------------------------------------------------
# Deploy AKS Bootstrap to support Inventory infrastructure
# -----------------------------------------------------------------------------
resources:
  containers:
  # Container image with ansible and azure collection installed
  - container: ansible_az
    image: aksbootstrap.azurecr.io/ansible_azure:dev
    endpoint: aksbootstrap

trigger: none

variables:
  # Get Ansible-Autmation secret
  - group: azure_automation

  - name: aksName
    value: aksbootstrap

  - name: acrName
    value: aksbootstrap

  - name: resourceGroup
    value: rg-aks-bootstrap-networking-spoke

  - name: aksPublicIpResourceGroup
    value: rg-francecentral-networking-hub

  - name: aksPublicIpDnsLabel
    value: inventory

  - name: aksPublicIpName
    value: pi-inventory-gateway

  - name:  applicationTestNameSpace
    value: ingress-controller

  - name:  aksControlPlaneIdentity
    value: umi-aks-bootsrap

  - name:  aksKubeletIdentity
    value: umi-aks-bootstrap-kubelet

  - name:  managedIdentitiesResourceGroup
    value: rg-francecentral-managed_identities


stages:
  - stage: deploy_aks
    displayName: Deploy AKS Bootstrap

    jobs:
      # -----------------------------------------------------------------------------
      # Create AKS Cluster
      # -----------------------------------------------------------------------------
      - job: create_cluster
        displayName: Create Aks Bootstrap
        pool:
          vmImage: 'ubuntu-latest'

        container: ansible_az

        steps:

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  echo ""
                  echo "Ansible version"
                  echo "=================================================="
                  ansible --version

                  echo ""
                  echo "Azure and kubernetes collections"
                  echo "=================================================="
                  ansible-galaxy collection list | grep azure.azcollection
                  ansible-galaxy collection list | grep kubernetes.core

                  echo ""
                  echo "Azure phyton modules"
                  echo "=================================================="
                  pip freeze | grep azure
            displayName: 'Display information'

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  ansible-playbook aks_cluster_create.yml \
                                   -i ../inventory/root \
                                   -e ansible_python_interpreter=/usr/bin/python3 \
                                   --vault-password-file <(echo $ANSIBLE_VAULT_PASSWORD)

            displayName: 'Create cluster'
            env:
              AZURE_TENANT: $(TenantId)
              AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZURE_CLIENT_ID: $(Ansible-Automation-ClientId)
              AZURE_SECRET: $(Ansible-Automation)
              ANSIBLE_VAULT_PASSWORD: $(ansible-vault-password)

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  ansible-playbook aks_cluster_permissions_assign.yml \
                                   -i ../inventory/root \
                                   -e ansible_python_interpreter=/usr/bin/python3 \
                                   --vault-password-file <(echo $ANSIBLE_VAULT_PASSWORD)

            displayName: 'User managed identities permissions'
            env:
              AZURE_TENANT: $(TenantId)
              AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZURE_CLIENT_ID: $(Ansible-Automation-ClientId)
              AZURE_SECRET: $(Ansible-Automation)
              ANSIBLE_VAULT_PASSWORD: $(ansible-vault-password)

      # -----------------------------------------------------------------------------
      # Base Configuration for the cluster
      # -----------------------------------------------------------------------------
      - job: configure_cluster_security
        displayName: Enable User Managed identities
        dependsOn:
          - create_cluster
        pool:
          vmImage: 'ubuntu-latest'

        steps:

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get Control plane Identity Id
                write-host "Retrieve Aks Control Plane identity Principal Id"
                $aksControlPlaneIdentityId = az identity show --name $(aksControlPlaneIdentity) --resource-group $(managedIdentitiesResourceGroup) --query "id" -o tsv
                write-host "Aks Control Plane identity Principal Id : $aksControlPlaneIdentityId"

                # Get kubelet identity Id
                write-host "Retrieve Aks kubelet identity Principal Id"
                $aksKubeletIdentityId = az identity show --name $(aksKubeletIdentity) --resource-group $(managedIdentitiesResourceGroup) --query "id" -o tsv
                write-host "Aks Control Plane identity Principal Id : $aksKubeletIdentityId"

                write-host "Enable Aks User Managed identities"
                az aks update `
                    --resource-group $(resourceGroup) `
                    --name $(aksName) `
                    --enable-managed-identity `
                    --assign-identity $aksControlPlaneIdentityId `
                    --assign-kubelet-identity $aksKubeletIdentityId `
                    --yes

              addSpnToEnvironment: true
              useGlobalConfig: true
            displayName: 'Enable Managed identities'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Upgrade default node pool
                az aks nodepool upgrade --cluster-name $(aksName) --resource-group $(resourceGroup) --name default --node-image-only

              addSpnToEnvironment: true
              useGlobalConfig: true
            displayName: 'Upgrade node pools with kubelet identity'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Stop the cluster
                az aks stop --name $(aksName) --resource-group $(resourceGroup)

                # Wait one minute
                Start-Sleep -Seconds 60

                # Start the cluster
                az aks start --name $(aksName) --resource-group $(resourceGroup)


              addSpnToEnvironment: true
              useGlobalConfig: true
            displayName: 'Restart cluster'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Ansible-Automation'
              azureResourceGroup: 'rg-aks-bootstrap-networking-spoke'
              kubernetesCluster: 'aksbootstrap'
              command: 'apply'
              arguments: '-f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
            displayName: 'Deploy standard kubernetes dashboard'

  - stage: configure_aks
    displayName: Configure AKS Bootstrap
    dependsOn:
      - deploy_aks

    jobs:
      # -----------------------------------------------------------------------------
      # Install Cert Manager
      # -----------------------------------------------------------------------------
      - job: configure_cert_manager
        displayName: Configure Cert-Manager
        pool:
            vmImage: 'ubuntu-latest'

        container: ansible_az

        steps:

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  ansible-playbook aks_cluster_configure.yml \
                                   -i ../inventory/root \
                                   -e ansible_python_interpreter=/usr/bin/python3 \
                                   -t cert_manager \
                                   --vault-password-file <(echo $ANSIBLE_VAULT_PASSWORD)

            displayName: 'Deploy cert manager'
            env:
              AZURE_TENANT: $(TenantId)
              AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZURE_CLIENT_ID: $(Ansible-Automation-ClientId)
              AZURE_SECRET: $(Ansible-Automation)
              ANSIBLE_VAULT_PASSWORD: $(ansible-vault-password)


          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: 'Ansible-Automation'
          #     azureResourceGroup: 'rg-aks-bootstrap-networking-spoke'
          #     kubernetesCluster: 'aksbootstrap'
          #     command: 'upgrade'
          #     chartType: 'Name'
          #     chartName: 'jetstack/cert-manager'
          #     releaseName: 'cert-manager'
          #     namespace: 'cert-manager'
          #     overrideValues: |
          #       installCRDs=true
          #       nodeSelector."kubernetes\.io/os"=linux

          #     recreate: true
          #     resetValues: true
          #     install: true
          #   displayName: 'Deploy cert manager'

      # -----------------------------------------------------------------------------
      # Install Cert Manager
      # -----------------------------------------------------------------------------
      - job: configure_ingress_controller
        displayName: Configure Ingress Controller
        pool:
            vmImage: 'ubuntu-latest'
        dependsOn:
          - configure_cert_manager

        container: ansible_az

        steps:

          - task: Bash@3
            inputs:
                targetType: 'inline'
                workingDirectory: ansible
                script: |
                  ansible-playbook aks_cluster_configure.yml \
                                   -i ../inventory/root \
                                   -e ansible_python_interpreter=/usr/bin/python3 \
                                   -t ingress_controller \
                                   --vault-password-file <(echo $ANSIBLE_VAULT_PASSWORD)

            displayName: 'Deploy Ingress Controller'
            env:
              AZURE_TENANT: $(TenantId)
              AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZURE_CLIENT_ID: $(Ansible-Automation-ClientId)
              AZURE_SECRET: $(Ansible-Automation)
              ANSIBLE_VAULT_PASSWORD: $(ansible-vault-password)

  - stage: test_application
    displayName: Deploy test application
    dependsOn:
      - configure_aks

    jobs:
      # -----------------------------------------------------------------------------
      # deploy application test
      # -----------------------------------------------------------------------------
      - job: deploy_test_application
        displayName: Deploy test application
        pool:
            vmImage: 'ubuntu-latest'

        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Ansible-Automation'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install kubectl
                az aks install-cli

                # Get credentials for the AKS cluster
                az aks get-credentials --resource-group rg-aks-bootstrap-networking-spoke --name aksbootstrap

                if kubectl get namespace $(applicationTestNameSpace); then
                  echo "Namespace $(applicationTestNameSpace) already exists"
                else
                  kubectl create namespace $(applicationTestNameSpace)
                fi

                # Run kubectl command
                kubectl label namespace $(applicationTestNameSpace) cert-manager.io/disable-validation=true
            displayName: 'Create application test namespace'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Ansible-Automation'
              azureResourceGroup: 'rg-aks-bootstrap-networking-spoke'
              kubernetesCluster: 'aksbootstrap'
              command: 'apply'
              arguments: '-f ./resources/aks/aks-helloworld-one.yaml -f ./resources/aks/aks-helloworld-two.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              namespace: $(applicationTestNameSpace)
            displayName: 'Deploy Helloworld'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'Ansible-Automation'
              azureResourceGroup: 'rg-aks-bootstrap-networking-spoke'
              kubernetesCluster: 'aksbootstrap'
              command: 'apply'
              arguments: '-f ./resources/aks/ingress.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              namespace: $(applicationTestNameSpace)
            displayName: 'Deploy Helloworld ingress'
